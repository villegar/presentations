---
title: "<img src='images/danta.png' /><br/>API development with R"
author: "Roberto Villegas-Diaz"
institute: "University of Liverpool"
abstract: "Application Programming Interfaces (APIs) are used extensively in a variety of fields; Using APIs you can extract information from local and remote servers (e.g., getting tweets from X -previously known as Twitter-), you can upload information to a remote server (e.g., update a dashboard with results from your research), you can interact with hardware (e.g., smart devices that are connected to the internet), and many other applications. The session will introduce you to APIs and what they can do, building up (with practical examples) to you writing your own API in R using the plumber (https://cran.r-project.org/package=plumber) package. Topics covered: What is an API? Where are APIs used? How can we use APIs in R? The plumber framework. Writing APIs with plumber in R."
email: "r.villegas-diaz@liverpool.ac.uk"
url: https://www.robertovillegas-diaz.com/presentations/xxiv-simmac
bibliography: inst/references.bib
csl: inst/elsevier-harvard2.csl
nocite: |
  @*
lang: en-GB
format: 
  revealjs:
    slide-number: false
    incremental: false
    output-file: index.html
    theme: [default, ./css/custom.css]
    css: ./css/style.css
    preview-links: false
    scrollable: false
    self-contained: false
    footer: "[https://www.robertovillegas-diaz.com/presentations/xxiv-simmac](https://www.robertovillegas-diaz.com/presentations/xxiv-simmac)"
    logo: images/uol_logo.png
title-slide-attributes:
  data-background-color: '#ACD8A9'
  # data-background-image: images/danta.png
  # data-background-size: 47%
  # data-background-position: 50% 2%
  # data-background-opacity: "1"
---

# Outline

```{r helper_functions}
#| echo: false
insert_qr <- function(URL, 
                      caption, 
                      ecl = "M", 
                      size = 250, 
                      img_dir = "./images",
                      foreground = "black",
                      background = "white") {
  filename <- caption |>
    stringr::str_to_lower() |>
    stringr::str_squish() |>
    stringr::str_replace_all(" ", "_")
  filename <- file.path(img_dir, paste0("qr_", filename, ".svg"))
  qrcode::qr_code(URL, ecl = ecl) |>
    qrcode::generate_svg(filename = filename,
                         size = size, 
                         foreground = foreground,
                         background = background,
                         show = FALSE)
  # cat("<a href='", URL, "'>\n")
  cat("<div class='qr-image-div'>\n")
  cat("![](", filename, "){fig-align='center' .qr-image}",
      paste0("<span class='qr-caption'>", caption, "</span>")
      )
  cat("</div>")
}
```

- **Day 1**
  - Introduction to APIs
  - Working with APIs
  - Introduction to `{plumber}`

- **Day 2**
  - Building your own API
  - Further considerations

<!-- # Day 1 -->

# Introduction to APIs

## What's an API? {.smaller}

> **A**pplication **P**rogramming **I**nterface

<div class='qr-image-div'>
![](images/API-EN.png){height=450 fig-align='center'}
<span class="img-caption-medium">
**Source:** [@Tolassy2015]
</span>
</div>

---

## Why use APIs? {.smaller}

::: {.incremental}
- Streamline your data flows
- Common language
- Static interface
- Enable others to use your "products"

:::

<!-- ; @Zhong2019 -->


![](images/xkcd_api_2x.png){.absolute bottom=0 right=0} 

::: aside
**Comic source:** [https://xkcd.com/1481](https://xkcd.com/1481)
:::

---

## How do APIs work? {.smaller}

> You don't need to know how the kitchen or the restaurant operates, you just need to know how to order. [@Grguric_Buhler_2020]

<div class='qr-image-div'>
![](images/api_restaurant.png){height=450 fig-align='center'}
<span class="img-caption-medium">
**Source:** [@Layne2020]
</span>
</div>

## Example APIs {.smaller auto-animate=true}

Few examples (there are too many):

- Open Street Maps: [https://wiki.openstreetmap.org/wiki/API](https://wiki.openstreetmap.org/wiki/API)
- Wikidata: [https://www.wikidata.org/w/api.php?action=help](https://www.wikidata.org/w/api.php?action=help)
- X / Twitter: [https://developer.twitter.com/en/products/twitter-api](https://developer.twitter.com/en/products/twitter-api)

<div class='qr-image-div'>
![](images/apis-enable-scale.jpg){height=350 fig-align='center'}
<span class="img-caption-medium">
<br />
**Source:** [@Fox2016]
</span>
</div>


## Example APIs {.smaller auto-animate=true}

Few examples (there are too many):

- Open Street Maps: [https://wiki.openstreetmap.org/wiki/API](https://wiki.openstreetmap.org/wiki/API)
- Wikidata: [https://www.wikidata.org/w/api.php?action=help](https://www.wikidata.org/w/api.php?action=help)
- X / Twitter: [https://developer.twitter.com/en/products/twitter-api](https://developer.twitter.com/en/products/twitter-api)

**Resources of interest**: 

- List of public APIs: [https://github.com/public-apis/public-apis](https://github.com/public-apis/public-apis)
- R package to access *Hundreds of 'APIs'*: [https://github.com/jonthegeek/anyapi](https://github.com/jonthegeek/anyapi)


<!-- <div class='qr-image-div'> -->
<!-- ![](images/apis-enable-scale.jpg){height=150 fig-align='center'} -->
<!-- <span class="img-caption-medium"> -->
<!-- <br /><br /> -->
<!-- **Source:** [@Fox2016] -->
<!-- </span> -->
<!-- </div> -->

# Working with APIs

## Structure of a Query {.smaller auto-animate=true}

<div class='qr-image-div'>
![](images/Web_Request-GET.webp){height=450 fig-align='center'}
<span class="img-caption-medium">
**Source:** [@realisable2023]
</span>
</div>

---

## Structure of a Query {.smaller auto-animate=true}

<div class='qr-image-div'>
![](images/Web_Request-GET.webp){height=300 fig-align='center'}
<span class="img-caption-medium">
**Source:** [@realisable2023]
</span>
</div>

"Method" | "Scheme" | "Server" | "Path" | "Query String"
-|-|-|-|-:
Pavement | Liver building | Flat 3 | Kitchen/cupboard/get_mug | colour=red
Road     | Liver building | Garage | park_car

---

## Structure of a Query: Response {.smaller}

::: {.incremental}
- Typically get a _header_ and _content_ in the response.
- Common response codes in header
  - 200 – OK
  - 404 – Not found
  - 500 – Internal server error
  - For more details see: [https://en.wikipedia.org/wiki/List_of_HTTP_status_codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)
- Content is usually formatted in JSON^[JavaScript Object Notation: [https://www.json.org](https://www.json.org)] or XML^[eXtensible Markup Language: [https://en.wikipedia.org/wiki/XML](https://en.wikipedia.org/wiki/XML)].

:::

---

## Structure of a Query: Example {.smaller}

<div class='qr-image-div'>
![](images/structure-of-a-CrossRef-API-Query.png){height=150 fig-align='center'}
<br/><br/>
<span class="img-caption-medium">
**Source:** [@Teplitzky2021]
</span>
</div>

Try running the following line of code:

```r
url("https://api.crossref.org/works/<DOI>")
```

Replace `<DOI>` by any DOI (Direct Object Identifier) you want! For example: [`10.1016/j.gloplacha.2022.103790`](https://doi.org/10.1016/j.gloplacha.2022.103790).

## Structure of a Query: Example {.smaller auto-animate=true}

<div class='qr-image-div'>
![](images/structure-of-a-CrossRef-API-Query.png){height=150 fig-align='center'}
<br/><br/>
<span class="img-caption-medium">
**Source:** [@Teplitzky2021]
</span>
</div>

Try running the following line of code:

```{r}
#| echo: true
url("https://api.crossref.org/works/10.1016/j.gloplacha.2022.103790")
```


## Structure of a Query: Example {.smaller auto-animate=true}

<div class='qr-image-div'>
![](images/structure-of-a-CrossRef-API-Query.png){height=150 fig-align='center'}
<br/><br/>
<span class="img-caption-medium">
**Source:** [@Teplitzky2021]
</span>
</div>

Try running the following line of code:

```{r}
#| echo: true
con <- url("https://api.crossref.org/works/10.1016/j.gloplacha.2022.103790")
tmp <- readLines(con)
strsplit(tmp, ",")[[1]][1:12] # extract few rows
```

## Structure of a Query: Example {.smaller auto-animate=false}

<div class='qr-image-div'>
![](images/structure-of-a-CrossRef-API-Query.png){height=150 fig-align='center'}
<br/><br/>
<span class="img-caption-medium">
**Source:** [@Teplitzky2021]
</span>
</div>

A *nicer* approach to run this code:

```{r}
#| echo: true
result <- jsonlite::read_json(
  "https://api.crossref.org/works/10.1016/j.gloplacha.2022.103790"
)

# get the query status
result$status

# get field from the result, 'reference count'
result$message$`reference-count`
```

# Hands on session 1 {auto-animate=false}

- [**Guided**] How many people are on the International Space Station (ISS) right now?

- [**DIY**] What is the current position of the International Space Station? Can you create a plot?

::: {.callout-note}
Could you please download the following zip file? This file contains all the scripts we will use for the hands-on sessions.

[http://tinyurl.com/xxiv-simmac-api](http://tinyurl.com/xxiv-simmac-api)

:::

---

## [**Guided**] How many people are on the International Space Station right now? {.smaller auto-animate=false}

**API call: ** [http://api.open-notify.org/astros.json](http://api.open-notify.org/astros.json) 

::: {.aside} 
**Reference R Script:** `1_api_who_is_on_the_ISS_now.R` 
:::

```{.r code-line-numbers="1|"}
response <- httr::GET("http://api.open-notify.org/astros.json")
response
```

::: {.callout-note}
Note the values for _Status_ and _Content-Type_! Both useful to determine whether the query was successful and the type of content returned.
:::

---

## [**Guided**] How many people are on the International Space Station right now? {.smaller auto-animate=true}

**API call: ** [http://api.open-notify.org/astros.json](http://api.open-notify.org/astros.json)

::: {.aside} 
**Reference R Script:** `1_api_who_is_on_the_ISS_now.R` 
:::

```{.r code-line-numbers="|4|"}
response <- httr::GET("http://api.open-notify.org/astros.json")

# the content is in binary, so convert the response to an R data object
content <- jsonlite::fromJSON(rawToChar(response$content))

# check number of people
content$number
```

---

## [**Guided**] How many people are on the International Space Station right now? {.smaller auto-animate=true}

**API call: ** [http://api.open-notify.org/astros.json](http://api.open-notify.org/astros.json)

::: {.aside} 
**Reference R Script:** `1_api_who_is_on_the_ISS_now.R` 
:::

```{r}
#| echo: true
response <- httr::GET("http://api.open-notify.org/astros.json")

# the content is in binary, so convert the response to an R data object
content <- jsonlite::fromJSON(rawToChar(response$content))

# check the people
content$people
```

---

## [**Guided**] How many people are on the International Space Station right now? {.smaller auto-animate=true}

**API call: ** [http://api.open-notify.org/astros.json](http://api.open-notify.org/astros.json)

::: {.callout-tip}
## Alternative
Note that we can use the API call with the `jsonlite::read_json` function; however,
we don't get as much details from the call as we did with our previous approach. Also, this only works when the response returned is in JSON format.
:::

```{.r code-line-numbers="2|"}
# read contents from API call
contents <- jsonlite::read_json("http://api.open-notify.org/astros.json")
```

---

## [**Guided**] How many people are on the International Space Station right now? {.smaller auto-animate=true}

**API call: ** [http://api.open-notify.org/astros.json](http://api.open-notify.org/astros.json)

```{r}
#| echo: true
# read contents from API call
contents <- jsonlite::read_json("http://api.open-notify.org/astros.json")

# check status of query
contents$message
```

---

## [**Guided**] How many people are on the International Space Station right now? {.smaller auto-animate=true}

**API call: ** [http://api.open-notify.org/astros.json](http://api.open-notify.org/astros.json)

```{r}
#| echo: true
# read contents from API call
contents <- jsonlite::read_json("http://api.open-notify.org/astros.json")

# check number of people
contents$number
```

---

## [**Guided**] How many people are on the International Space Station right now? {.smaller auto-animate=true}

**API call: ** [http://api.open-notify.org/astros.json](http://api.open-notify.org/astros.json)

```{r}
#| echo: true
# read contents from API call
contents <- jsonlite::read_json("http://api.open-notify.org/astros.json")

# extract details of the crew
contents$people |>
  purrr::map(\(x) tibble::tibble(name = x$name, craft = x$craft)) |>
  purrr::list_rbind()
```

---

## [**DIY**] What is the current position of the International Space Station? Can you create a plot? {.smaller auto-animate=true}

**API call: ** [http://api.open-notify.org/iss-now.json](http://api.open-notify.org/iss-now.json)

::: {.aside} 
**Reference R Script:** `2_api_position_of_the_ISS_now.R` 
:::

::: {.fragment .fade-in}

```{r}
#| echo: true
response <- httr::GET("http://api.open-notify.org/iss-now.json")

# the content is in binary, so convert the response to an R data object
content <- jsonlite::fromJSON(rawToChar(response$content))

# get timestamp
as.POSIXct(content$timestamp, origin = "1970-01-01")

# get position coordinates
content$iss_position
```

:::


## [**DIY**] What is the current position of the International Space Station? Can you create a plot? {.smaller auto-animate=true}

**API call: ** [http://api.open-notify.org/iss-now.json](http://api.open-notify.org/iss-now.json)

We can create a helper function to extract multiple records:
```{.r code-line-numbers="|2-4|5|8-10|15|16|17|"}
iss_position <- function() {
  response <- httr::GET("http://api.open-notify.org/iss-now.json")
  # the content is in binary, so convert the response to an R data object
  content <- jsonlite::fromJSON(rawToChar(response$content))
  Sys.sleep(1) # pause for 1 second
  # extract each field and convert to the appropriate data type
  tibble::tibble(
    timestamp = as.POSIXct(content$timestamp, origin = "1970-01-01"),
    longitude = as.numeric(content$iss_position$longitude),
    latitude = as.numeric(content$iss_position$latitude)
  )
}

# map over the helper function X times, here 10
iss_position_tbl <- seq_len(10) |> # number of positions to extract
  purrr::map(\(x) iss_position()) |>
  purrr::list_rbind()
```

## [**DIY**] What is the current position of the International Space Station? Can you create a plot? {.smaller .scrollable auto-animate=true}

Here is a subset of the position of the ISS, capture over a period of 15 minutes, `seq_len(15 * 60)`:
```{r}
iss_position_tbl <- readr::read_rds("data/iss_position_tbl.rds")
dplyr::bind_rows(
  head(iss_position_tbl, n = 10),
  tail(iss_position_tbl, n = 10)
) |>
  knitr::kable()
```

::: {.callout-note}

Note that only the top 10 rows and the bottom 10 rows are displayed, there are an additional `r nrow(iss_position_tbl) - 20` rows of data ranging from `r iss_position_tbl$timestamp[11]` to `r iss_position_tbl$timestamp[nrow(iss_position_tbl) - 9]`.

:::

## [**DIY**] What is the current position of the International Space Station? Can you create a plot? {.smaller auto-animate=true}

Plot the position of the ISS, here using the [`{leaflet}`](https://cran.r-project.org/package=leaflet) package:

```{r}
#| echo: true
#| eval: false
# create icon from online image
iss_icon <- leaflet::makeIcon(
  iconUrl = "https://cdn-icons-png.flaticon.com/512/81/81959.png", 
  iconWidth = 15, 
  iconHeight = 15
)

# create plot of the positions
iss_position_tbl |>
  leaflet::leaflet() |>
  leaflet::addTiles() |>
  leaflet::addMarkers(
    lng = ~longitude, 
    lat = ~latitude, 
    label = ~timestamp,
    icon = iss_icon
  )
```


::: {.aside}

**Icon source:** [https://www.flaticon.com/free-icon/international-space-station_81959](https://www.flaticon.com/free-icon/international-space-station_81959)

:::

## [**DIY**] What is the current position of the International Space Station? Can you create a plot? {.smaller auto-animate=true}

<center>
```{r}
#| echo: false
#| eval: true
#| fig-align: center
iss_icon <- leaflet::makeIcon(
  iconUrl = "https://cdn-icons-png.flaticon.com/512/81/81959.png", 
  iconWidth = 15, 
  iconHeight = 15
)

iss_position_tbl |>
  leaflet::leaflet() |>
  leaflet::addTiles() |>
  leaflet::addMarkers(
    lng = ~longitude, 
    lat = ~latitude, 
    label = ~timestamp,
    icon = iss_icon
  )
```

</center>

# {.smaller}

### Questions? / Short break

<div class='qr-image-div'>
![](images/conference_question.png){height=570 fig-align='center'}
<br/><br/>
<span class="img-caption-medium">
**Comic source:** [https://xkcd.com/2191](https://xkcd.com/2191)
</span>
</div>

# Introduction to [`{plumber}`](https://www.rplumber.io)

![](images/plumber.png){.absolute bottom=0 right=0} 

<br /> <br />

::: {.aside}
**Plumber's website:** [https://www.rplumber.io](https://www.rplumber.io)
:::

## What's `{plumber}`? {.smaller}

> Plumber allows you to create a web API by merely _decorating_ your existing R source code with roxygen2-like comments. [@Barret2022]

::: {.fragment .fade-in}
::: {.callout-tip}
## R comments \& decorators
- Regular R comments are included with the `#`. 
- Roxygen2 comments allow the user to document their functions with the notation `#'` which is translated into R documentation.
- `{plumber}` uses the notation `#*`.
:::
:::

## `{plumber}`-ising a function / notation {.smaller}

Given a simple _hello world_ function

```r
# This function returns a message
hello_world <- function() {
  return("Hello XXIV SIMMAC!")
}
```

## `{plumber}`-ising a function / notation {.smaller auto-animate=true}

Given a simple _hello world_ function:

```{.r code-line-numbers="|1-2|"}
#* This function returns a message
#* @get /hello_world
function() {
  return("Hello XXIV SIMMAC!")
}
```

`{plumber}`-ised function!

::: {.fragment .fade-in}
::: {.callout-note}

- The change from `#` to `#*` for the comments.
- The addition of `@get /<function_name>`.
- The function name was relocated.

:::
:::


## `{plumber}`-ising a function / notation: with params {.smaller auto-animate=true}

Given a function to calculate the square of a number, `a`:

```r
# This function calculates the square of `a`
square <- function(a) {
  return(as.numeric(a) ^ 2)
}
```

## `{plumber}`-ising a function / notation: with params {.smaller auto-animate=true}

Given a function to calculate the square of a number, `a`:

```{.r code-line-numbers="|1,3|2|1-3|"}
#* This function calculates the square of `a`
#* @param a Numeric value.
#* @get /square 
function(a) {
  return(as.numeric(a) ^ 2)
}
```

`{plumber}`-ised function!

::: {.fragment .fade-in}
::: {.callout-note}

- The change from `#` to `#*` for the comments.
- The addition of `@param <param_name> <description`. If the function had multiple params, the each of them will have to be documented using this format.
- The addition of `@get /<function_name>`.
- The function name was relocated.

:::
:::


## Routing & Input {.smaller}

> An incoming HTTP request must be “routed” to one or more R functions. Plumber has two distinct families of functions that it handles: _endpoints_ and _filters_. [@Barret2022]


<div class='qr-image-div'>
![](images/plumber-flow.png){height=350 fig-align='center'}

</div>


## Routing & Input: endpoints {.smaller}

An endpoint is an annotated function, like those we already saw:

```{.r code-line-numbers="|1-2"}
#* This function returns a message
#* @get /hello_world
function() {
  return("Hello XXIV SIMMAC!")
}
```

::: {.fragment}

::: {.callout-note}
This annotation specifies that this function is responsible for generating the response to any `GET` request to `/hello_world`. 
:::

:::

## Routing & Input: endpoints {.smaller auto-animate=false}

The annotations that generate an endpoint include:

- `@get`: Read
- `@post`: Read / write
- `@put`: Update / replace
- `@delete`: Delete

::: {.aside}
More details can be found here: [https://www.restapitutorial.com/lessons/httpmethods.html](https://www.restapitutorial.com/lessons/httpmethods.html)
:::

::: {.fragment .fade-in}

An endpoint can support multiple methods: 

```r
#* @get /cars
#* @post /cars
#* @put /cars
function(){
  ...
}
```
:::

## Routing & Input: filters {.smaller auto-animate=false}

> allow to break down complex logic into a sequence of independent, understandable steps. [@Barret2022]

::: {.fragment .fade-in} 

Filters can do one of three things in handling a request:

- _Forward_ control onto the next handler, potentially after mutating the request.
- _Return_ a response itself and not forward to subsequent handlers
- _Throw_ an error

:::

::: {.aside}

More details about endpoints and filters: [https://www.rplumber.io/articles/routing-and-input.html](https://www.rplumber.io/articles/routing-and-input.html)

:::


## Routing & Input: filters {.smaller auto-animate=true}

> allow to break down complex logic into a sequence of independent, understandable steps. [@Barret2022]


```{.r code-line-numbers="|1|2|3|5|"}
#* @filter removeSemicolon
function(req, res) {
  req$args <- req$args |>
    purrr::map(stringr::str_remove_all, pattern = ";")
  plumber::forward()
}
```

::: {.fragment .fade-in} 

::: {.callout-note}

- Note the inclusion of the `@filter` _decorator_.
- A _filter_ has two parameters, `req` (request) and `res` (result). 

  - Both `req` and `res` are R environments, which means that changes done by a filter,
  will be _visible_ to subsequent filters/endpoints.
  
- The `plumber::forward()` call, passes control to the next handler in the pipeline (another filter or an endpoint. [@Barret2022]
:::

:::


## Rendering Output {.smaller auto-animate=false}

A response object (an environment) contains the following elements:

<!-- ::: {.incremental} -->

| Name | Example | Description |
|-|-|-:
headers	| `list(header = "abc")`	| A list of HTTP headers to include in the response
body | `NULL` |	This is set to the serialized output of the handler
status | `200` |	The [HTTP status code](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status) included in the response

<!-- ::: -->


## Rendering Output: serializers {.smaller auto-animate=false}

> In order to send a response from R to an API client, the object must be “serialized” into some format that the client can understand. [@Barret2022]


<!-- :::: {.columns} -->

<!-- ::: {.column width="45%"} -->

::: {.fragment .fade-in}
Some examples:

- CSV: `@serializer csv`
- JPEG: `@serializer jpeg`
- JSON: `@serializer json`
- PDF: `@serializer pdf`
- PNG: `@serializer png`
- Text: `@serializer text`

:::

<!-- ::: -->

<!-- ::: {.column width="10%"} -->

<!-- ::: -->

<!-- ::: {.column width="45%"} -->

<!-- ::: {.fragment .fade-in} -->

<!-- ::: -->

<!-- ::: -->

<!-- :::: -->

::: {.aside}
More details: [https://www.rplumber.io/articles/rendering-output.html](https://www.rplumber.io/articles/rendering-output.html)

:::

## Rendering Output: serializers {.smaller auto-animate=false}

Serializers can also be customised:

```{.r code-line-numbers="|2|"}
#* Example of custom graphical output
#* @serializer png list(width = 400, height = 500)
#* @get /
function(){
  plot(1:10)
}
```

::: {.fragment .fade-in}

Error handling:
```{.r code-line-numbers="|4|10-12|"}
#* Example of throwing an error
#* @get /simple
function() {
  stop("I'm an error!")
}

#* Generate a friendly error
#* @get /friendly
function(res) {
  msg <- "Your request did not include a required parameter."
  res$status <- 400 # Bad request
  list(error = jsonlite::unbox(msg))
}
```
:::

# Building your own API { auto-animate=false}

## {.smaller}
### Building your own API

::: {.callout-warning}
Before you attempt the following steps, you must execute the following command:

```r
install.packages("plumber")
```

:::

1. Inside RStudio, click on `File` > `New File` > `Plumber API...`:

![](images/rstudio_new_plumber_api.png){height=350 fig-align='center'}


## Building your own API {.smaller}

2. Next, choose a name for your API (e.g., `XXIV_SIMMAC`) and click on *Create*:

![](images/rstudio_new_plumber_api_2.png){height=300 fig-align='center'}


## {.smaller}
### Building your own API

3. A new R script (called `plumber.R`) should be displayed in your RStudio session.

```{.r}
# This is a Plumber API. You can run the API by clicking
# the 'Run API' button above.
#
# Find out more about building APIs with Plumber here:
#
#    https://www.rplumber.io/
#
library(plumber)

#* @apiTitle Plumber Example API
#* @apiDescription Plumber example description.

#* Echo back the input
#* @param msg The message to echo
#* @get /echo
function(msg = "") {
    list(msg = paste0("The message is: '", msg, "'"))
}
```

Note that a new button should have appeared at the top of your script options: 

![](images/rstudio_run_api.png){height=40}

Clicking on this button will *deploy* your API locally.

# Hands on session 2 {.smaller auto-animate=false}

I. Write a plumber function to use the Gapminder dataset to find the population of Costa Rica in 1982. 
  
::: {.callout-note}
Gapminder is a dataset of populations of various countries from 1952 - 2007. We will access it with the [`{gapminder}`](https://cran.r-project.org/package=gapminder) package. [@Bryan2023]
:::
    
II. Write a plumber function to allow a user to find out the population of any country during any year in the Gapminder dataset.

III. Write a plumber function to plot the population change of a user defined country.


## {.smaller}
### I. Write a plumber function to use the Gapminder dataset to find the population of Costa Rica in 1982.

::: {.aside} 
**Reference R Scripts:** `4_pop_costa_rica_1982-client.R` and `4_pop_costa_rica_1982-client.R` 
:::

__Where do we start?__

::: {.incremental}

1. We can start by creating a "simple" R function that gets the data we want!

::: {.fragment .fade-in}

```{r}
#| echo: true
# This function returns the population of Costa Rica in 1982
pop_cr_1982 <- function() {
  pop_tbl <- gapminder::gapminder |>
    dplyr::filter(country == "Costa Rica") |>
    dplyr::filter(year == 1982)
  return(pop_tbl$pop)
}

# call our function
pop_cr_1982()
```

:::

:::

## {.smaller auto-animate=true}
### I. Write a plumber function to use the Gapminder dataset to find the population of Costa Rica in 1982.

2. Next, we can add the "`{plumber}` decorators" to transform this function.

::: {.fragment .fade-in}

```{.r code-line-numbers="|1-2|3|"}
#* This function returns the population of Costa Rica in 1982
#* @get /pop_cr_1982 
function() {
  pop_tbl <- gapminder::gapminder |>
    dplyr::filter(country == "Costa Rica") |>
    dplyr::filter(year == 1982)
  return(pop_tbl$pop)
}
```

:::


## {.smaller}
### I. Write a plumber function to use the Gapminder dataset to find the population of Costa Rica in 1982.

3. After deploying the API, you can test it as you already learnt:

```{r hands_on_2_exercise_1}
#| echo: true
#| cache: false
response <- httr::GET("http://127.0.0.1:1234/pop_cr_1982")
response

# the content is in binary, so convert the response to an R data object
content <- jsonlite::fromJSON(rawToChar(response$content))
content
```


## {.smaller auto-animate=true}
### II. Write a plumber function to allow a user to find out the population of any country during any year in the Gapminder dataset.


__Where do we start?__

::: {.incremental}

1. We can start by adapting our previous solution.

::: {.fragment .fade-in}

```{.r}
#* This function returns the population of Costa Rica in 1982
#* @get /pop_cr_1982 
function() {
  pop_tbl <- gapminder::gapminder |>
    dplyr::filter(country == "Costa Rica") |>
    dplyr::filter(year == 1982)
  return(pop_tbl$pop)
}
```

:::

:::

## {.smaller auto-animate=true}
### II. Write a plumber function to allow a user to find out the population of any country during any year in the Gapminder dataset.

::: {.aside} 
**Reference R Scripts:** `5_pop_any_country_any_year-client.R` and `5_pop_any_country_any_year-server.R` 
:::

__Where do we start?__


1. We can start by adapting our previous solution.

```{.r code-line-numbers="|1|2-3|4|7-8|"}
#* This function returns the population for a `country` in a particular `year`
#* @param country String with a country in the Gapminder dataset: https://doi.org/10.7910/DVN/GJQNEQ.
#* @param year A numeric value with a year of data available in Gapminder dataset (1952 - 2007 in steps of 5 years).
#* @get /pop_country
function(country, year) {
  pop_tbl <- gapminder::gapminder |>
    dplyr::filter(country == !!country) |>
    dplyr::filter(year == as.numeric(!!year))
  return(pop_tbl$pop)
}
```

::: {.callout-note}

Note the addition of the *bang-bang* operator, to "unquote" the values received for `country` and `year`. [@wickham2014advanced]

:::

## {.smaller .scrollable}
### II. Write a plumber function to allow a user to find out the population of any country during any year in the Gapminder dataset.

2. After deploying the API, you can test it as you already learnt:

```{r hands_on_2_exercise_2}
#| echo: true
#| cache: false
# encode URL / replace spaces, etc.
url <- URLencode("http://127.0.0.1:1234/pop_country?country=United Kingdom&year=1982")
response <- httr::GET(url)
response

# the content is in binary, so convert the response to an R data object
content <- jsonlite::fromJSON(rawToChar(response$content))
content
```

::: {.callout-note}
Note that this call to the API has an extra line, 

```{.r}
URLencode("http://127.0.0.1:1234/pop_country?country=United Kingdom&year=1982")
```

The function `URLencode` changes special characters (like spaces) into the appropriate hexadecimal representation.
:::


## {.smaller auto-animate=true}
### II. Write a plumber function to allow a user to find out the population of any country during any year in the Gapminder dataset.

Further improvements, the solution shown before does not handle (in a user friendly) common errors like: 

- entering a country that doesn't exist in the Gapminder data
- choosing a year outside those available
- choosing a non-numeric value for the year
- and probably others.


## {.smaller auto-animate=true .scrollable}
### II. Write a plumber function to allow a user to find out the population of any country during any year in the Gapminder dataset.

**Is there anything we can do to validate these fields?**

::: {.fragment}

Yes, of course! We can create a _filter_ or perform these checks within the _endpoint_.

```{.r code-line-numbers="|1-2|5|7-8|10|12-15|16|18-19|24|"}
#* This filter checks for valid countries in the Gapminder dataset
#* @filter validate_year
function(req, res) {
  # check if the calling endpoint has a year parameter
  if ("year" %in% names(req$args)) {
    # check if the given year is in the Gapminder dataset
    year <- as.numeric(req$args$year)
    gapminder_years <- unique(gapminder::gapminder$year)
    # do check
    status <- any(year %in% gapminder_years)
    if (!status) {
      msg <- paste0("The given year, ", year, 
                    ", it's not part of the Gapminder dataset. ",
                    "Please, try one of the following: ",
                    paste0(gapminder_years, collapse = ", ")) 
      res$status <- 400 # Bad request
      return(list(
        error = jsonlite::unbox(msg),
        valid_years = gapminder_years
        )
      )
    }
  }
  plumber::forward()
}
```

:::

## {.smaller auto-animate=true .scrollable}
### II. Write a plumber function to allow a user to find out the population of any country during any year in the Gapminder dataset.

Let's test if the new filter works, by requesting data for a year not in the Gapminder dataset: 

```{r}
#| echo: true
#| cache: false
# encode URL / replace spaces, etc.
url <- URLencode("http://127.0.0.1:1234/pop_country?country=United Kingdom&year=2024")
response <- httr::GET(url)
response

# the content is in binary, so convert the response to an R data object
content <- jsonlite::fromJSON(rawToChar(response$content))
content
```

## {.smaller auto-animate=true}
### III. Write a plumber function to plot the population change of a user defined country.

::: {.aside} 
**Reference R Scripts:** `6_pop_change_any_country-client.R` and `6_pop_change_any_country-server.R` 
:::

__Where do we start?__

1. We can start by adapting our previous solution.

```{.r}
#* This function returns the population for a `country` in a particular `year`
#* @param country String with a country in the Gapminder dataset: https://doi.org/10.7910/DVN/GJQNEQ.
#* @param year A numeric value with a year of data available in Gapminder dataset (1952 - 2007 in steps of 5 years).
#* @get /pop_country
function(country, year) {
  pop_tbl <- gapminder::gapminder |>
    dplyr::filter(country == !!country) |>
    dplyr::filter(year == as.numeric(!!year))
  return(pop_tbl$pop)
}
```

## {.smaller auto-animate=true}
### III. Write a plumber function to plot the population change of a user defined country.


__Where do we start?__

1. We can start by adapting our previous solution.

```{.r code-line-numbers="|3-4|10-11|"}
#* This function returns a plot of the change in population for a `country`, as per the Gapminder dataset
#* @param country String with a country in the Gapminder dataset: https://doi.org/10.7910/DVN/GJQNEQ.
#* @serializer png
#* @get /pop_country_change
function(country) {
  pop_tbl <- gapminder::gapminder |>
    dplyr::filter(country == !!country) |>
    dplyr::select(year, pop)
  
  options(scipen=999) # Change number format on axes
  plot(pop_tbl, xlab = "Year", ylab = "Population")
}
```

## {.smaller auto-animate=true}
### III. Write a plumber function to plot the population change of a user defined country.

2. After deploying the API, you can test it as you already learnt:

```{r}
#| echo: true
#| cache: false
# encode URL / replace spaces, etc.
url <- URLencode("http://127.0.0.1:1234/pop_country_change?country=Costa Rica")
response <- httr::GET(url)
response

# the content is in binary, so convert the response to an R data object
content <- png::readPNG(response$content)
grid::grid.raster(content, height = grid::unit(5, "in"))
```

## {.smaller auto-animate=true}
### III. Write a plumber function to plot the population change of a user defined country.

3. Alternative, instead of returning a plot, we can return a data frame by updating the endpoint:

```{.r code-line-numbers="|1,3|8|"}
#* This function returns a data frame with the change in population for a `country`, as per the Gapminder dataset
#* @param country String with a country in the Gapminder dataset: https://doi.org/10.7910/DVN/GJQNEQ.
#* @get /pop_country_change_df
function(country) {
  pop_tbl <- gapminder::gapminder |>
    dplyr::filter(country == !!country) |>
    dplyr::select(year, pop)
  return(pop_tbl)
}
```

## {.smaller auto-animate=true}
### III. Write a plumber function to plot the population change of a user defined country.

```{r}
#| echo: true
#| cache: false
# encode URL / replace spaces, etc.
url <- URLencode("http://127.0.0.1:1234/pop_country_change_df?country=Costa Rica")
response <- httr::GET(url)
response

# the content is in binary, so convert the response to an R data object
content <- jsonlite::fromJSON(rawToChar(response$content))
tibble::as_tibble(content)
```


## {.smaller auto-animate=true .scrollable}
### III. Write a plumber function to plot the population change of a user defined country.

4. Alternative plot:

```{r}
#| echo: true
response <- httr::GET(URLencode("http://127.0.0.1:1234/pop_country_change_df?country=Costa Rica"))
jsonlite::fromJSON(rawToChar(response$content)) |>
  tibble::as_tibble() |>
  ggplot2::ggplot() +
  ggplot2::geom_point(ggplot2::aes(x = year, y = pop / 1E6)) +
  ggplot2::labs(x = "Year", y = "Population [millions]", title = "Population change of Costa Rica") +
  ggplot2::theme_bw()
```


# Further considerations

## {.smaller .incremental}

### Further considerations

- Remote deployment: [https://www.rplumber.io/articles/hosting.html](https://www.rplumber.io/articles/hosting.html)

- Swagger documentation: 
  - [https://www.rplumber.io/reference/pr_set_docs.html](https://www.rplumber.io/reference/pr_set_docs.html)
  - [https://swagger.io](https://swagger.io)
  
- Security: [https://www.rplumber.io/articles/security.html](https://www.rplumber.io/articles/security.html)

- Cheat-sheet: [https://github.com/rstudio/cheatsheets/blob/main/plumber.pdf](https://github.com/rstudio/cheatsheets/blob/main/plumber.pdf)

# Thank you! 

<!-- {background-image="images/rU32uy.jpg"} -->

```{r}
#| echo: false
#| output: asis
insert_qr("mailto:r.villegas-diaz@liverpool.ac.uk?subject=XXIV SIMMAC", 
          "r.villegas-diaz@liverpool.ac.uk",
          size = 400)
```

<!-- # Outline -->
## Acknowledgements {.smaller}

<!-- <div class='qr-image-div'> -->
<center>
![](images/groundswell_logo.png){width=920 fig-align='center'}
</center>

In association with

<center>
![](images/gw_uni_logos.png){width=900 fig-align='center'}
</center>
<!-- </div> -->

::: {.aside}
**Website:** [https://www.groundswelluk.org](https://www.groundswelluk.org)
:::

# References

::: {#refs}
:::